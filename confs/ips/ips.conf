input 
{
	syslog 
	{
                port => 5250
		codec => plain
                {
                        charset => "ISO-8859-1"
                }
		tags => ["ips"]
        }
}
filter
{
	if "ips" in [tags]
	{
                # Parse everything from message
                kv
                {
                        allow_duplicate_values => false
                        source => "message"
                        value_split => "="
                        field_split => " "
                        trim_value => "\""
                        exclude_keys => [ "tags" ]
                }
                # Extract tags separately into kv_tags
                kv
                {
                        allow_duplicate_values => false
                        source => "message"
                        value_split => "="
                        field_split => " "
                        trim_value => "\""
                        include_keys => [ "tags" ]
                        target => "kv_tags"
                }
                # If log line had tags, append them to top-level [tags]
                if [kv_tags][tags]
                {
                        mutate
                        {
                                add_field => { "tags" => "%{[kv_tags][tags]}" }
                        }
                        mutate
                        {
                                remove_field => ["kv_tags"]
                        }
                }
       	        date 
		{
       	                match => [ "time", "UNIX"]
       		}
                mutate 
		{
                	convert => 
			{
                        	"s_port" => "integer"
                                "bytes" => "integer"
                                "time" => "integer"
                                "start_time" => "integer"
                                "client_inbound_bytes" => "integer"
                                "client_inbound_packets" => "integer"
                                "client_outbound_packets" => "integer"
                                "client_outbound_bytes" => "integer"
                                "server_inbound_bytes" => "integer"
                                "server_inbound_packets" => "integer"
                                "server_outbound_packets" => "integer"
                                "server_outbound_bytes" => "integer"
                                "elapsed" => "integer"
                                "log_delay" => "integer"
                                "nat_addtnl_rulenum" => "integer"
                                "nat_rulenum" => "integer"
                                "nsons" => "integer"
                                "p_dport" => "integer"
                                "packets" => "integer"
                                "pos" => "integer"
                                "proto" => "integer"
                                "xlatedport" => "integer"
                                "xlatesport" => "integer"
                        }

                }
                geoip
		{
                        source => "dst"
                        target => "dst_geoip"
                }
                geoip
		{
                        source => "src"
                        target => "src_geoip"
                }
		geoip 
		{
      			default_database_type => 'ASN'
      			database => '/opt/maxmind/output/GeoLite2-ASN.mmdb'
      			cache_size => 5000
      			source => 'src'
      			target => 'src_asn'
    		}
		geoip 
		{
      			default_database_type => 'ASN'
      			database => '/opt/maxmind/output/GeoLite2-ASN.mmdb'
      			cache_size => 5000
      			source => 'dst'
      			target => 'dst_asn'
    		}
        	translate 
		{
            		source => "[src]"
            		target => "[is_tor]"
            		dictionary_path => "/opt/netflow/dic/torexil.yml"
        	}
		mutate 
		{
			rename => { "service" => "[service_obj]" }
		}
		if [service_obj] =~ "^[0-9]+$" 
		{
			mutate 
			{ convert => { "service_obj" => "integer" } }
  			mutate 
			{ rename => { "service_obj" => "service_port" } }
		} 
		else 
		{
  			mutate { rename => { "service_obj" => "service_type" } }
		}
                mutate
                {
                        remove_field => ["message", "event.original"]
                }
        }
}
output
{
	if "ips" in [tags]
	{
		elasticsearch 
		{
        		hosts => ["https://localhost:9200"]
        	  index => "ips-%{+YYYY}"
			      user  => "elastic"
            password => "your password"
			      ssl_verification_mode => none
    }
	}
}
